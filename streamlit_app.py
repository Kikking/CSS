# -*- coding: utf-8 -*-
"""
Created on Mon Jan 29 15:08:32 2024

@author: User
"""

import streamlit as str
import os
import pandas as pd
import matplotlib.pyplot as ml
import numpy as np

str.title("Nanopore DNA Sequencing Software Benchmark")
str.write("""
          DNA sequencing implements machine-learning to interpret signal data generated by Oxford Nanopore Technolies Sequencing Platform into meaningful strings of DNA sequence. 
          Two competing basecallers:Guppy and Dorado.  
          """)
#str.text_input("What plot?:", "bar graph.......")

str.subheader("Click on a Cell Type to Analyse:")

def sdust_sum(x):
    long_directory_path = "C:/Users/User/CSS/streamlit_data/longqc"
    long_stats = os.listdir(long_directory_path)
    QC_table = pd.DataFrame() 
    temp_file = long_stats[x:x+1]
    for sample in temp_file:
        
        file_path = os.path.join("C:/Users/User/CSS/streamlit_data/longqc", sample, "longqc_sdust.txt")
        if os.path.exists(file_path):
            temp = pd.read_csv(file_path, sep="\t", names=["read_name", "num_masked", "lengths", "masked_fraction", "avg_read_QV", "QV7"])
            temp["sample_name"] = sample
            temp = temp[["lengths","sample_name"]]
            temp["basecaller"] = "Guppy"
            print(temp)
         
            temp['cell'] = temp['sample_name'].apply(lambda x: 'A549' if 'A' in x else
                                           'MCF7' if 'M' in x else
                                           'K546' if 'K' in x else
                                           'HepG2' if 'H' in x else
                                           'Hct116' if 'Hc' in x else
                                           None)
         
    
    
          
            QC_table = pd.concat([QC_table, temp])
           
            return QC_table

        else: print(f"The file {file_path} does not exist.")

def nanostat(x):
    nano_directory_path = "C:/Users/User/CSS/streamlit_data/nanoplot"
    nano_stats = os.listdir(nano_directory_path)
    QC_table = pd.DataFrame()
      
    temp_file = nano_stats[x:x+1]
    print(temp_file)
    for sample in temp_file :
          file_path = os.path.join('D:\SGNEX\\nplot', sample, 'NanoPlot-data.tsv.gz')
          if os.path.exists(file_path):
              temp = pd.read_csv(file_path, sep ='\t')
              temp["sample_name"] = sample
              temp = temp[["lengths","sample_name"]]
              temp["basecaller"] = "Dorado"
              print(temp)
              temp['cell'] = temp['sample_name'].apply(lambda x: 'A549' if 'A' in x else
                                             'MCF7' if 'M' in x else
                                             'K546' if 'K' in x else
                                             'HepG2' if 'H' in x else
                                             'Hct116' if 'Hc' in x else
                                             None)
        
    
             
              QC_table = pd.concat([QC_table, temp])
              return QC_table
        
          else: print(f"The file {file_path} does not exist.")
 
         



def length_plot(df,df2, xfilt=5000):
    groups = df.groupby('sample_name')
    df_mean = df["lengths"].mean()
    df2_mean =df2["lengths"].mean()
    #["A_d_r1r3","A_d_r2r1",'A_d_r5r3', 'Hc_d_r1r4', 'Hc_d_r1r5']
    fig, axs = ml.subplots(2, sharex= True)
    #fig.suptitle('Vertically stacked subplots')
    axs[0].hist(df2[df2["basecaller" ]== "Dorado"]["lengths"], bins =3000 )
    ml.xlim((0 ,xfilt))
    ml.ylim((0, 300000))
    ml.xlabel("Read Length")
    axs[0].set_title("Read Length Distribution")
    axs[0].set_ylabel('DORADO')
    axs[0].vlines(df2_mean, ymin = 0, ymax = 300000)
    
    #Guppy
    axs[1].hist(df[df["basecaller" ]== "Guppy"]["lengths"], bins =3000)
    ml.xlim((0 ,xfilt))
    ml.ylim((0, 300000))
    axs[1].set_ylabel('GUPPY')
    axs[1].vlines(df_mean, ymin = 0, ymax = 300000, label = "Mean")
    ml.style.use('dark_background')
    ml.legend()
    #ml.show(fig)
   # str.pyplot(fig)
     



col1, col2 = str.columns(2)  # Create two columns with equal width
plot_container = str.empty()

with col1:
     if str.button('Blood Cells'):
         plot_container.write("Massaging Data...")
         x=3
         plot_container.empty()
       # Display plot from function
         
         plot_container.pyplot( length_plot(sdust_sum(x),nanostat(x)))
            
        
   
with col2:
     if str.button('Lung Cells'):
         plot_container.write("Massaging Data...")
        
         x=0
         plot_container.empty()
       # Display plot from function
         plot_container.pyplot( length_plot(sdust_sum(x),nanostat(x)))
           
         
         
    



